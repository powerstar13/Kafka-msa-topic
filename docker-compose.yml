version: '3'

services:

  zookeeper:
    image: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - kafka-elk

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    networks:
      - kafka-elk
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://:29092,PLAINTEXT_HOST://:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_JMX_PORT: "9091"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  akhq:
    image: tchiotludo/akhq
    container_name: akhq
    ports:
      - "8080:8080"
    networks:
      - kafka-elk
    depends_on:
      - kafka
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            kafka:
              properties:
                bootstrap.servers: kafka:29092
  # kafka-manager: # AKHQ로 관리하는 것이 장점이 더 많으므로 대체
  #   image: hlebalbau/kafka-manager
  #   container_name: kafka-manager
  #   ports:
  #     - "9000:9000"
  #   networks:
  #     - kafka-elk
  #   depends_on:
  #     - kafka
  #   environment:
  #     ZK_HOSTS: "zookeeper:2181"
  #     APPLICATION_SECRET: "random-secret"
  #     KAFKA_MANAGER_AUTH_ENABLED: "true"
  #     KAFKA_MANAGER_USERNAME: master
  #     KAFKA_MANAGER_PASSWORD: msa

  elasticsearch:
    image: elasticsearch:8.1.3
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - kafka-elk
    depends_on:
      - kafka
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65535
        hard: 65535
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    environment:
      - node.name=elasticsearch
      - discovery.seed_hosts=elasticsearch
      - cluster.initial_master_nodes=elasticsearch
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - http.max_content_length=1024mb

  logstash:
    image: logstash:8.1.3
    container_name: logstash
    volumes:
      - ./logstash.conf/:/usr/share/logstash/pipeline/logstash.conf
    networks:
      - kafka-elk
    depends_on:
      - elasticsearch

  kibana:
    image: kibana:8.1.3
    container_name: kibana
    ports:
      - "5601:5601"
    networks:
      - kafka-elk
    depends_on:
      - elasticsearch

volumes:
  esdata1:
    driver: local

networks:
  kafka-elk:
    driver: bridge

# zookeeper & kafka 클러스터 실행
## options: 백그라운드로 실행하고 싶을 경우 `-d`를 사용한다.
### docker-compose up -d
# broker 삼중화
### dcoker-compose scale kafka=3
# zookeeper & kafka 클러스터 중지
### docker-compose down